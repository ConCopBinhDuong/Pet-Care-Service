###############################################################################
# PET CARE SERVICE - COMPREHENSIVE DIET MANAGEMENT API TESTS
# Generated: 2024-01-06
# Server: http://localhost:8383
# 
# TOKENS INCLUDED:
# - Pet Owner 1 (ID: 1): Valid token for full CRUD operations
# - Pet Owner 2 (ID: 2): Valid token for testing ownership restrictions
# - Service Provider (ID: 4): Invalid role - should be rejected
#
# USAGE: Use REST Client extension in VS Code to run these tests
# PREREQUISITES: 
# - Server must be running on port 8383
# - Pet owners must have pets in the database
# - Use test_pets_comprehensive.rest to create pets first if needed
###############################################################################

@baseUrl = http://localhost:8383/api

# JWT Tokens (Valid for 24 hours) - Update these with fresh tokens
@petOwner1Token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJwZXRvd25lcjFAZXhhbXBsZS5jb20iLCJyb2xlIjoiUGV0IG93bmVyIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNzQ5MzA3OTM4LCJleHAiOjE3NDkzOTQzMzh9.IR0KWS3DlVwgDRAE7Vapvi4wpBXcd0syM9Ab5hWOjHk
@petOwner2Token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiZW1haWwiOiJwZXRvd25lcjJAZXhhbXBsZS5jb20iLCJyb2xlIjoiUGV0IG93bmVyIiwibmFtZSI6IkphbmUgU21pdGgiLCJpYXQiOjE3NDkzMDc5MzgsImV4cCI6MTc0OTM5NDMzOH0.yv3o3HG868MEpXqLZsaqI3uQsx_BUJbIRreI_KJKkkI
@serviceProviderToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwiZW1haWwiOiJ2ZXRAZXhhbXBsZS5jb20iLCJyb2xlIjoiU2VydmljZSBwcm92aWRlciIsIm5hbWUiOiJEci4gV2lsc29uIiwiaWF0IjoxNzQ5MzA3OTM4LCJleHAiOjE3NDkzOTQzMzh9.rCJJ_o8K0DO7QCgj_yVfgPEx9Wylq4RfJZn6-nZU6Lg

###############################################################################
# SECTION 1: AUTHENTICATION & AUTHORIZATION TESTS
###############################################################################

### 1.1 Test Without Token (Should Fail - 401)
GET {{baseUrl}}/diet

### 1.2 Test With Invalid Token (Should Fail - 401)
GET {{baseUrl}}/diet
Authorization: Bearer invalid_token

### 1.3 Test With Service Provider Token (Should Fail - 403)
GET {{baseUrl}}/diet
Authorization: Bearer {{serviceProviderToken}}

### 1.4 Test With Valid Pet Owner Token (Should Succeed - 200)
GET {{baseUrl}}/diet
Authorization: Bearer {{petOwner1Token}}

###############################################################################
# SECTION 2: DIET CREATION TESTS (Pet Owner 1)
###############################################################################

### 2.1 Create Diet - Valid Data (Should Succeed - 201)
# Note: Replace petId with actual pet ID from your database
POST {{baseUrl}}/diet/pet/1
Authorization: Bearer {{petOwner1Token}}
Content-Type: application/json

{
    "name": "Royal Canin Adult",
    "amount": "2 cups daily",
    "description": "High-quality dry food for adult dogs"
}

### 2.2 Create Diet - Missing Required Field (Should Fail - 400)
POST {{baseUrl}}/diet/pet/1
Authorization: Bearer {{petOwner1Token}}
Content-Type: application/json

{
    "amount": "1 cup",
    "description": "Missing name field"
}

### 2.3 Create Diet - Invalid Diet Name (Should Fail - 400)
POST {{baseUrl}}/diet/pet/1
Authorization: Bearer {{petOwner1Token}}
Content-Type: application/json

{
    "name": "Diet@#$%^&*()",
    "amount": "1 cup",
    "description": "Invalid characters in name"
}

### 2.4 Create Diet - Description Too Long (Should Fail - 400)
POST {{baseUrl}}/diet/pet/1
Authorization: Bearer {{petOwner1Token}}
Content-Type: application/json

{
    "name": "Test Diet",
    "amount": "1 cup",
    "description": "This is an extremely long description that exceeds the maximum allowed character limit of 1000 characters. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem."
}

### 2.5 Create Diet - Invalid Pet ID (Should Fail - 404)
POST {{baseUrl}}/diet/pet/99999
Authorization: Bearer {{petOwner1Token}}
Content-Type: application/json

{
    "name": "Diet for Non-existent Pet",
    "amount": "1 cup"
}

### 2.6 Create Second Diet for Same Pet (Should Succeed - 201)
POST {{baseUrl}}/diet/pet/1
Authorization: Bearer {{petOwner1Token}}
Content-Type: application/json

{
    "name": "Hill's Science Diet",
    "amount": "1.5 cups morning, 1.5 cups evening",
    "description": "Veterinary recommended diet for optimal health"
}

###############################################################################
# SECTION 3: DIET CREATION TESTS (Pet Owner 2 - Different User)
###############################################################################

### 3.1 Create Diet for Pet Owner 2's Pet (Should Succeed - 201)
# Note: Replace petId with Pet Owner 2's pet ID
POST {{baseUrl}}/diet/pet/3
Authorization: Bearer {{petOwner2Token}}
Content-Type: application/json

{
    "name": "Blue Buffalo Natural",
    "amount": "3 cups daily",
    "description": "Natural ingredients for healthy digestion"
}

### 3.2 Try to Create Diet for Pet Owner 1's Pet (Should Fail - 403)
POST {{baseUrl}}/diet/pet/1
Authorization: Bearer {{petOwner2Token}}
Content-Type: application/json

{
    "name": "Unauthorized Diet",
    "amount": "1 cup"
}

###############################################################################
# SECTION 4: DIET RETRIEVAL TESTS
###############################################################################

### 4.1 Get All Diets for Pet Owner 1 (Should Succeed - 200)
GET {{baseUrl}}/diet
Authorization: Bearer {{petOwner1Token}}

### 4.2 Get All Diets for Pet Owner 2 (Should Succeed - 200)
GET {{baseUrl}}/diet
Authorization: Bearer {{petOwner2Token}}

### 4.3 Get Diets for Specific Pet (Pet Owner 1's Pet - Should Succeed - 200)
GET {{baseUrl}}/diet/pet/1
Authorization: Bearer {{petOwner1Token}}

### 4.4 Get Diets for Another Owner's Pet (Should Fail - 403)
GET {{baseUrl}}/diet/pet/3
Authorization: Bearer {{petOwner1Token}}

### 4.5 Get Specific Diet by ID (Should Succeed - 200)
# Note: Replace dietId with actual diet ID from previous responses
GET {{baseUrl}}/diet/1
Authorization: Bearer {{petOwner1Token}}

### 4.6 Get Non-Existent Diet (Should Fail - 404)
GET {{baseUrl}}/diet/99999
Authorization: Bearer {{petOwner1Token}}

### 4.7 Get Another Owner's Diet (Should Fail - 403)
# Note: Replace dietId with Pet Owner 2's diet ID
GET {{baseUrl}}/diet/3
Authorization: Bearer {{petOwner1Token}}

###############################################################################
# SECTION 5: DIET UPDATE TESTS
###############################################################################

### 5.1 Update Diet - Valid Data (Should Succeed - 200)
# Note: Replace dietId with actual diet ID
PUT {{baseUrl}}/diet/1
Authorization: Bearer {{petOwner1Token}}
Content-Type: application/json

{
    "name": "Royal Canin Adult - Updated",
    "amount": "2.5 cups daily",
    "description": "Updated description with new feeding instructions"
}

### 5.2 Update Diet - Partial Update (Should Succeed - 200)
PUT {{baseUrl}}/diet/1
Authorization: Bearer {{petOwner1Token}}
Content-Type: application/json

{
    "amount": "3 cups daily"
}

### 5.3 Update Diet - Invalid Data (Should Fail - 400)
PUT {{baseUrl}}/diet/1
Authorization: Bearer {{petOwner1Token}}
Content-Type: application/json

{
    "name": ""
}

### 5.4 Update Another Owner's Diet (Should Fail - 403)
# Note: Replace dietId with Pet Owner 2's diet ID
PUT {{baseUrl}}/diet/3
Authorization: Bearer {{petOwner1Token}}
Content-Type: application/json

{
    "name": "Unauthorized Update"
}

### 5.5 Update Non-Existent Diet (Should Fail - 404)
PUT {{baseUrl}}/diet/99999
Authorization: Bearer {{petOwner1Token}}
Content-Type: application/json

{
    "name": "Ghost Diet"
}

###############################################################################
# SECTION 6: DIET DELETION TESTS
###############################################################################

### 6.1 Delete Diet - Owner's Diet (Should Succeed - 200)
# Note: Replace dietId with actual diet ID (use the second diet created)
DELETE {{baseUrl}}/diet/2
Authorization: Bearer {{petOwner1Token}}

### 6.2 Delete Another Owner's Diet (Should Fail - 403)
# Note: Replace dietId with Pet Owner 2's diet ID
DELETE {{baseUrl}}/diet/3
Authorization: Bearer {{petOwner1Token}}

### 6.3 Delete Non-Existent Diet (Should Fail - 404)
DELETE {{baseUrl}}/diet/99999
Authorization: Bearer {{petOwner1Token}}

### 6.4 Delete Already Deleted Diet (Should Fail - 404)
DELETE {{baseUrl}}/diet/2
Authorization: Bearer {{petOwner1Token}}

###############################################################################
# SECTION 7: EDGE CASE TESTS
###############################################################################

### 7.1 Create Diet with Extremely Long Name (Should Fail - 400)
POST {{baseUrl}}/diet/pet/1
Authorization: Bearer {{petOwner1Token}}
Content-Type: application/json

{
    "name": "This is a very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very long diet name that exceeds limits",
    "amount": "1 cup"
}

### 7.2 Create Diet with Special Characters in Name (Should Succeed)
POST {{baseUrl}}/diet/pet/1
Authorization: Bearer {{petOwner1Token}}
Content-Type: application/json

{
    "name": "Premium Diet (Chicken & Rice) - Adult Formula",
    "amount": "2 cups",
    "description": "Special formula with chicken and rice"
}

### 7.3 Create Diet with Empty Optional Fields (Should Succeed)
POST {{baseUrl}}/diet/pet/1
Authorization: Bearer {{petOwner1Token}}
Content-Type: application/json

{
    "name": "Simple Diet"
}

### 7.4 Update Diet with No Changes (Should Fail - 400)
PUT {{baseUrl}}/diet/1
Authorization: Bearer {{petOwner1Token}}
Content-Type: application/json

{}

###############################################################################
# SECTION 8: FINAL VERIFICATION TESTS
###############################################################################

### 8.1 Final List - Pet Owner 1 Diets
GET {{baseUrl}}/diet
Authorization: Bearer {{petOwner1Token}}

### 8.2 Final List - Pet Owner 2 Diets
GET {{baseUrl}}/diet
Authorization: Bearer {{petOwner2Token}}

### 8.3 Final List - Pet Owner 1's Pet Diets
GET {{baseUrl}}/diet/pet/1
Authorization: Bearer {{petOwner1Token}}

###############################################################################
# END OF TESTS
# 
# EXPECTED RESULTS SUMMARY:
# - Authentication tests should properly reject unauthorized access
# - Pet owners should only see and manipulate diets for their own pets
# - CRUD operations should work correctly for authorized users
# - Validation should prevent invalid data submission
# - Error handling should return appropriate HTTP status codes
# - Diet management should maintain data integrity and ownership boundaries
###############################################################################
