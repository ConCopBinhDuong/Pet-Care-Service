### Test New In-Memory Verification System
### Base URL
@baseUrl = http://localhost:8383/api

### 1. Register Pet Owner (will trigger verification code generation)
# @name register_pet_owner
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
    "username": "verification_test_user",
    "email": "verify_test@example.com",
    "password": "TestPass123",
    "gender": "Male",
    "role": "Pet owner",
    "phone": "+84901234567",
    "city": "Ho Chi Minh City",
    "address": "123 Test Street"
}

### 2. Register Service Provider with Phone (will trigger both email and phone verification)
# @name register_service_provider
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
    "username": "verification_service_provider",
    "email": "provider_verify@example.com",
    "password": "ProviderPass123",
    "gender": "Female",
    "role": "Service provider",
    "bussiness_name": "Pet Care Service Ltd",
    "phone": "+84987654321",
    "description": "Professional pet care services",
    "address": "456 Business Street",
    "website": "https://petcare.com"
}

### 3. Check Verification Status
GET {{baseUrl}}/auth/verification-status
Authorization: Bearer {{register_pet_owner.response.body.token}}

### 4. Try to Access Protected Route (Should Fail - Email Not Verified)
GET {{baseUrl}}/profile
Authorization: Bearer {{register_pet_owner.response.body.token}}

### 5. Verify Email with Wrong Code (Should Fail)
POST {{baseUrl}}/auth/verify-email
Authorization: Bearer {{register_pet_owner.response.body.token}}
Content-Type: application/json

{
    "code": "000000"
}

### 6. Verify Email with Correct Code (Check console for actual code)
POST {{baseUrl}}/auth/verify-email
Authorization: Bearer {{register_pet_owner.response.body.token}}
Content-Type: application/json

{
    "code": "REPLACE_WITH_ACTUAL_CODE_FROM_CONSOLE"
}

### 7. Verify Phone with Wrong Code (Should Fail)
POST {{baseUrl}}/auth/verify-phone
Authorization: Bearer {{register_pet_owner.response.body.token}}
Content-Type: application/json

{
    "code": "000000"
}

### 8. Verify Phone with Correct Code (Check console for actual code)
POST {{baseUrl}}/auth/verify-phone
Authorization: Bearer {{register_pet_owner.response.body.token}}
Content-Type: application/json

{
    "code": "REPLACE_WITH_ACTUAL_PHONE_CODE_FROM_CONSOLE"
}

### 9. Check Verification Status After Email Verification
GET {{baseUrl}}/auth/verification-status
Authorization: Bearer {{register_pet_owner.response.body.token}}

### 10. Try to Access Email-Protected Route (Should Work After Email Verification)
GET {{baseUrl}}/profile
Authorization: Bearer {{register_pet_owner.response.body.token}}

### 11. Try to Access Fully-Protected Route (Should Fail - Phone Not Verified)
GET {{baseUrl}}/pets
Authorization: Bearer {{register_pet_owner.response.body.token}}

### 12. Resend Email Verification (Should Fail - Already Verified)
POST {{baseUrl}}/auth/resend-email-verification
Authorization: Bearer {{register_pet_owner.response.body.token}}

### 13. Resend Phone Verification (Should Work)
POST {{baseUrl}}/auth/resend-phone-verification
Authorization: Bearer {{register_pet_owner.response.body.token}}

### 14. Test Rate Limiting - Resend Phone Again Immediately (Should Fail)
POST {{baseUrl}}/auth/resend-phone-verification
Authorization: Bearer {{register_pet_owner.response.body.token}}

### 15. Login and Check Verification Status
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
    "username": "verify_test@example.com",
    "password": "TestPass123"
}

### 16. Logout
POST {{baseUrl}}/auth/logout
Authorization: Bearer {{register_pet_owner.response.body.token}}

### === Testing Expired Codes ===
### 17. Register Another User for Expiration Test
# @name register_expire_test
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
    "username": "expire_test_user",
    "email": "expire_test@example.com",
    "password": "ExpireTest123",
    "gender": "Other",
    "role": "Pet owner",
    "phone": "+84912345678",
    "city": "Hanoi",
    "address": "789 Expire Street"
}

### 18. Wait 65+ seconds, then try to verify with the original code (Should Fail - Expired)
### Note: You need to wait more than 1 minute after registration before running this
POST {{baseUrl}}/auth/verify-email
Authorization: Bearer {{register_expire_test.response.body.token}}
Content-Type: application/json

{
    "code": "CHECK_CONSOLE_FOR_EXPIRED_CODE"
}

### === Testing Multiple Failed Attempts ===
### 19. Register User for Failed Attempts Test
# @name register_attempts_test
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
    "username": "attempts_test_user",
    "email": "attempts_test@example.com",
    "password": "AttemptsTest123",
    "gender": "Male",
    "role": "Pet owner",
    "city": "Da Nang",
    "address": "321 Attempts Street"
}

### 20. Make 3 Failed Verification Attempts
POST {{baseUrl}}/auth/verify-email
Authorization: Bearer {{register_attempts_test.response.body.token}}
Content-Type: application/json

{
    "code": "111111"
}

### 21. Second Failed Attempt
POST {{baseUrl}}/auth/verify-email
Authorization: Bearer {{register_attempts_test.response.body.token}}
Content-Type: application/json

{
    "code": "222222"
}

### 22. Third Failed Attempt
POST {{baseUrl}}/auth/verify-email
Authorization: Bearer {{register_attempts_test.response.body.token}}
Content-Type: application/json

{
    "code": "333333"
}

### 23. Fourth Failed Attempt (Should Block Further Attempts)
POST {{baseUrl}}/auth/verify-email
Authorization: Bearer {{register_attempts_test.response.body.token}}
Content-Type: application/json

{
    "code": "444444"
}